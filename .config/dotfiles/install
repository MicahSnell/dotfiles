#!/bin/bash
#
# facilitates initial repo setup: file copy, submodule initialization, config options,
# optional local install of some tools

usage() {
  cat <<-EOF
usage: $0 [-i|--install] [-h|--help]

copies git archive contents to .git directory location, and initializes submodules

options:
  -i, --install  perform local install of gitmux and kitty
  -h, --help     show this help message and exit
EOF
}

# print colorized success message
success() {
  echo -e "[ \e[1;32mSUCCESS\e[0m ] $@"
}

# print colorized failure message, and exits with return code 1
failure() {
  echo -e "[ \e[1;31mFAILURE\e[0m ] $@" >&2
  exit 1
}

parse_args() {
  do_install="false"
  while [[ $# -ne 0 ]]; do
    case "$1" in
      -i|--install)
        do_install="true"
        shift
        ;;
      -h|--help)
        usage
        exit 1
        ;;
      *)
        usage
        failure "unknown option: $1"
    esac
  done
}

# use .git file to determine where actual .git directory was written
get_dotfiles_directory() {
  cd "$(dirname $0)"
  clonedToDir="$(realpath ../../)"
  if [[ "${clonedToDir}" == "${HOME}" ]]; then
    failure "${clonedToDir} is the home directory, files already installed"
  fi

  if ! [[ -f "${clonedToDir}/.git" ]]; then
    failure "${clonedToDir}/.git does not exist"
  fi
  dotfilesDir="$(cat ${clonedToDir}/.git | awk '{print $NF}')"
}

# use git restore to "copy" archive, init submodules, don't show untracked files
setup_repo() {
  cd "$(dirname ${dotfilesDir})"
  echo "Initializing ${dotfilesDir}"
  git --git-dir="${dotfilesDir}" --work-tree="${PWD}" restore .
  git --git-dir="${dotfilesDir}" --work-tree="${PWD}" submodule update --init --recursive
  git --git-dir="${dotfilesDir}" --work-tree="${PWD}" config status.showUntrackedFiles no
  echo "${clonedToDir} can be deleted, run 'rm -rf ${clonedToDir}'"
}

# install binaries locally, kitty and gitmux
install_binaries() {
  if ! command -v kitty &>/dev/null; then
    curl --location --silent https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
    ln -sf "${HOME}/.local/kitty.app/bin/kitty" "${HOME}/.local/kitty.app/kitten" \
           "${HOME}/.local/bin/"
  fi

  if ! command -v gitmux &>/dev/null; then
    # get latest release options
    repo_info="$(curl --location --silent \
                   https://api.github.com/repos/arl/gitmux/releases/latest)"
    versions=($(echo "${repo_info}" | jq --raw-output '.assets[].name' | grep gitmux))

    # prompt user for desired version
    for ndx in "${!versions[@]}"; do
      printf '%s: %s\n' "${ndx}" "${versions[${ndx}]}"
    done
    read -p "Select index of version to install: " ndx
    if [[ "${ndx}" -lt 0 ]] || [[ "${ndx}" -ge "${#versions[@]}" ]]; then
      failure "invalid choice provided: ${ndx}"
    fi

    # download, extract, and link to local bin directory
    url="$(echo ${repo_info} |
             jq --raw-output --arg version ${versions[${ndx}]} \
             '.assets[] | select(.name==$version) | .browser_download_url')"
    curl --location --silent "${url}" -o "${versions[${ndx}]}"
    mkdir -p "${HOME}/.local/gitmux"
    tar xf "${versions[${ndx}]}" -C "${HOME}/.local/gitmux"
    ln -sf "${HOME}/.local/gitmux/gitmux" "${HOME}/.local/bin/"
    rm "${versions[${ndx}]}"
    success "installed gitmux"
  fi
}

main() {
  parse_args "$@"
  get_dotfiles_directory
  setup_repo
  if "${do_install}"; then
    install_binaries
  fi
  success "installed repo contents at $(dirname ${dotfilesDir})"
}

# call function given by $1 if it exists
if declare -f -- "$1" &>/dev/null; then
  "$@"
else
  main "$@"
fi
